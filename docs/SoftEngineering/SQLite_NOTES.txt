
::: ::: ::: ::: ::::: ::::
::: Implementing Auth ::::
::: ::: ::: ::: ::::: ::::
--01. New Blazor Web App => Individual Authorization then add nuget: Microsoft.AspNetCore.Identity.EntityFrameworkCore
--02. In csproj and Program.cs replace SqlServer with Sqlite:
REPLACE:
  builder.Services.AddDbContext<ApplicationDbContext>(options =>
      options.UseSqlServer(connectionString));

WITH:
  builder.Services.AddDbContext<ApplicationDbContext>(options =>
      options.UseSqlite(connectionString));  

--03. DELETE Everything in Migrations Folder (that gets included in templated auth project)
--04. update AppDbContext : IdentityDbContext<ApplicationUser>
--05. add-migration auth-init
--06. ensure SQLite connection string, e.g.:
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=C:\\Data\\AuthApp.db"
  },
--07. Move Migrations into nested folder in Data if desired
--08. update-database then check db file is created



::: ::: ::: ::: ::: ::: ::: ::::
::: Connecting within Rider ::::
::: ::: ::: ::: ::: ::: ::: ::::

jdbc:sqlite:C:/Data/PieShopHRM.db
jdbc:sqlite:C:/Data/FreeBilling.db

STEPS for SQLite:
Microsoft.EntityFrameworkCore.Sqlite
Microsoft.EntityFrameworkCore.Tools

As long as connection is active, a db-wal file (Write-Ahead-Logging) exists.
To sync writes back to the DB, de-activate the connection within Database panel

::: ::: ::: ::: :::
::: Program.cs ::::
::: ::: ::: ::: :::

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddDbContext<PhotosDbContext>(o => o.UseSqlite(
    builder.Configuration["ConnectionStrings:PhotosDBConnectionString"]));
    
::: ::: ::: ::: ::: ::: :::
::: appsettings.json ::::::
::: ::: ::: ::: ::: ::: :::
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
    "PhotosDBConnectionString": "Data Source=PhotoSlider.db"
  },
  "AllowedHosts": "*"
}

::: ::: ::: ::: ::: ::: :::
::: PhotosDbContext.cs ::::
::: ::: ::: ::: ::: ::: :::

using Microsoft.EntityFrameworkCore;
using PhotoSlider.API.Data.Entities;

namespace PhotoSlider.API.Data.DbContexts;

public class PhotosDbContext : DbContext
{
    public DbSet<Photo> Photos => Set<Photo>();
    public DbSet<Collection> Collections => Set<Collection>();
    
    public PhotosDbContext(DbContextOptions<PhotosDbContext> options)
        : base(options)
    { }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        _ = modelBuilder.Entity<Collection>().HasData(
            new(1, "Kids"),
            new(2, "Vacation"),
            new(3, "School"),
            new(4, "Nature"),
            new(5, "Potpourri")
            );

        _ = modelBuilder.Entity<Photo>().HasData(
           new(1, "IMG_20231112", "Picture 5"),
           new(4, "IMG_20231115", "Disney 2018"),
           new(5, "IMG_20231116", "Sunset 2020"),
           new(6, "IMG_20231117", "Sunset 2022")
           );

        _ = modelBuilder
            .Entity<Photo>()
            .HasMany(d => d.Collections)
            .WithMany(i => i.Photos)
            .UsingEntity(e => e.HasData(
                new { PhotosId = 1, CollectionsId = 1 },
                new { PhotosId = 2, CollectionsId = 1 },
                new { PhotosId = 3, CollectionsId = 1 },
                new { PhotosId = 1, CollectionsId = 3 },
                new { PhotosId = 2, CollectionsId = 3 },
                new { PhotosId = 4, CollectionsId = 2 },
                new { PhotosId = 5, CollectionsId = 4 },
                new { PhotosId = 6, CollectionsId = 4 },
                new { PhotosId = 3, CollectionsId = 2 }
                ));

        base.OnModelCreating(modelBuilder);
    }
}
